/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var u=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var x=(r,n)=>{for(var s in n)u(r,s,{get:n[s],enumerable:!0})},S=(r,n,s,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let t of P(n))!k.call(r,t)&&t!==s&&u(r,t,{get:()=>n[t],enumerable:!(e=v(n,t))||e.enumerable});return r};var C=r=>S(u({},"__esModule",{value:!0}),r);var A={};x(A,{default:()=>c});module.exports=C(A);var a=require("obsidian");var h=require("obsidian"),p=class{async translate(n,s,e,t,i){return(await(0,h.requestUrl)({url:"https://api.openai.com/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"},body:JSON.stringify({model:e,messages:[{role:"user",content:`Translate the following markdown document to English, preserving all markdown formatting:

${n}`}],temperature:t,max_tokens:i})})).json.choices[0].message.content}};var w=require("obsidian"),g=class{async translate(n,s,e,t,i){return(await(0,w.requestUrl)({url:`https://generativelanguage.googleapis.com/v1beta/models/${e}:generateContent?key=${s}`,method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:`Translate the following markdown document to English, preserving all markdown formatting:

${n}`}]}],generationConfig:{temperature:t,maxOutputTokens:i}})})).json.candidates[0].content.parts[0].text}};var T=require("obsidian"),m=class{async translate(n,s,e,t,i){return(await(0,T.requestUrl)({url:"https://api.anthropic.com/v1/messages",method:"POST",headers:{"x-api-key":s,"anthropic-version":"2023-06-01","Content-Type":"application/json"},body:JSON.stringify({model:e,max_tokens:i,temperature:t,messages:[{role:"user",content:`Translate the following markdown document to English, preserving all markdown formatting:

${n}`}]})})).json.content[0].text}};function f(r){switch(r){case"openai":return new p;case"google":return new g;case"anthropic":return new m;default:throw new Error(`Unsupported provider: ${r}`)}}var b={apiKey:"",llmProvider:"openai",outputPath:"translations",model:"gpt-4o",temperature:.7,maxTokens:2048},c=class extends a.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"translate-and-compare-file",name:"Translate and Compare File",callback:async()=>{let s=this.app.workspace.getActiveFile();if(!s){new a.Notice("No active file to translate.");return}if(!this.settings.apiKey){new a.Notice("API key is not set. Please configure it in the plugin settings.");return}new a.Notice("Translating document...");let e=await this.app.vault.read(s);try{let i=await f(this.settings.llmProvider).translate(e,this.settings.apiKey,this.settings.model,this.settings.temperature,this.settings.maxTokens),o=`${s.basename}.translated.md`,l=`${this.settings.outputPath}/${o}`;try{await this.app.vault.createFolder(this.settings.outputPath)}catch(O){}let y=await this.app.vault.create(l,i);new a.Notice("Translation complete."),await this.app.workspace.getLeaf("split","vertical").openFile(y)}catch(t){console.error("Translation Error:",t),new a.Notice("Error during translation. Check the console for details.")}}}),this.addSettingTab(new d(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},b,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},d=class extends a.PluginSettingTab{constructor(s,e){super(s,e);this.plugin=e}display(){let{containerEl:s}=this;s.empty(),new a.Setting(s).setName("API Key").setDesc("Your API key for the selected LLM provider.").addText(e=>e.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey).onChange(async t=>{this.plugin.settings.apiKey=t,await this.plugin.saveSettings()})),new a.Setting(s).setName("LLM Provider").setDesc("Choose the Large Language Model provider.").addDropdown(e=>e.addOption("openai","OpenAI").addOption("google","Google AI").addOption("anthropic","Anthropic").setValue(this.plugin.settings.llmProvider).onChange(async t=>{this.plugin.settings.llmProvider=t,await this.plugin.saveSettings()})),new a.Setting(s).setName("Model").setDesc("The model to use for translation.").addText(e=>e.setPlaceholder("e.g., gpt-4o").setValue(this.plugin.settings.model).onChange(async t=>{this.plugin.settings.model=t,await this.plugin.saveSettings()})),new a.Setting(s).setName("Temperature").setDesc("Controls randomness. Higher values make the output more random.").addSlider(e=>e.setLimits(0,1,.1).setValue(this.plugin.settings.temperature).setDynamicTooltip().onChange(async t=>{this.plugin.settings.temperature=t,await this.plugin.saveSettings()})),new a.Setting(s).setName("Max Tokens").setDesc("The maximum number of tokens to generate.").addText(e=>e.setPlaceholder("e.g., 2048").setValue(this.plugin.settings.maxTokens.toString()).onChange(async t=>{this.plugin.settings.maxTokens=parseInt(t),await this.plugin.saveSettings()})),new a.Setting(s).setName("Output Path").setDesc("Path to save translated files.").addText(e=>e.setPlaceholder("e.g., translations/").setValue(this.plugin.settings.outputPath).onChange(async t=>{this.plugin.settings.outputPath=t,await this.plugin.saveSettings()}))}};
