/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var $=Object.defineProperty;var q=Object.getOwnPropertyDescriptor;var Y=Object.getOwnPropertyNames;var W=Object.prototype.hasOwnProperty;var X=(i,n)=>{for(var t in n)$(i,t,{get:n[t],enumerable:!0})},Z=(i,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of Y(n))!W.call(i,s)&&s!==t&&$(i,s,{get:()=>n[s],enumerable:!(e=q(n,s))||e.enumerable});return i};var Q=i=>Z($({},"__esModule",{value:!0}),i);var tt={};X(tt,{default:()=>b});module.exports=Q(tt);var d=require("obsidian");var x=require("obsidian"),w=class{async translate(n,t,e,s,o,a,r,c){return(await(0,x.requestUrl)({url:a||"https://api.openai.com/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:e,messages:[{role:"user",content:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}],temperature:s,max_tokens:o})})).json.choices[0].message.content}async testConnection(n,t,e){await(0,x.requestUrl)({url:e||"https://api.openai.com/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify({model:t,messages:[{role:"user",content:"Hello, world!"}],max_tokens:5})})}};var I=require("obsidian"),T=class{async translate(n,t,e,s,o,a,r,c){return(await(0,I.requestUrl)({url:`${a||"https://generativelanguage.googleapis.com/v1beta/models"}/${e}:generateContent?key=${t}`,method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}]}],generationConfig:{temperature:s,maxOutputTokens:o}})})).json.candidates[0].content.parts[0].text}async testConnection(n,t,e){await(0,I.requestUrl)({url:`${e||"https://generativelanguage.googleapis.com/v1beta/models"}/${t}:generateContent?key=${n}`,method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:"Hello, world!"}]}],generationConfig:{maxOutputTokens:5}})})}};var N=require("obsidian"),S=class{async translate(n,t,e,s,o,a,r,c){return(await(0,N.requestUrl)({url:a||"https://api.anthropic.com/v1/messages",method:"POST",headers:{"x-api-key":t,"anthropic-version":"2023-06-01","Content-Type":"application/json"},body:JSON.stringify({model:e,max_tokens:o,temperature:s,messages:[{role:"user",content:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}]})})).json.content[0].text}async testConnection(n,t,e){await(0,N.requestUrl)({url:e||"https://api.anthropic.com/v1/messages",method:"POST",headers:{"x-api-key":n,"anthropic-version":"2023-06-01","Content-Type":"application/json"},body:JSON.stringify({model:t,max_tokens:5,messages:[{role:"user",content:"Hello, world!"}]})})}};var B=require("obsidian"),E=class{async translate(n,t,e,s,o,a,r,c){return(await(0,B.requestUrl)({url:a||"https://api.deepseek.com/chat/completions",method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:e,messages:[{role:"user",content:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}],temperature:s,max_tokens:o})})).json.choices[0].message.content}async testConnection(n,t,e){await(0,B.requestUrl)({url:e||"https://api.deepseek.com/chat/completions",method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify({model:t,messages:[{role:"user",content:"Hello, world!"}],max_tokens:5})})}};var L=require("obsidian"),P=class{async translate(n,t,e,s,o,a,r,c){return(await(0,L.requestUrl)({url:a||"https://api.mistral.ai/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:e,messages:[{role:"user",content:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}],temperature:s,max_tokens:o})})).json.choices[0].message.content}async testConnection(n,t,e){await(0,L.requestUrl)({url:e||"https://api.mistral.ai/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify({model:t,messages:[{role:"user",content:"Hello, world!"}],max_tokens:5})})}};var _=require("obsidian"),A=class{async translate(n,t,e,s,o,a,r,c){return(await(0,_.requestUrl)({url:a||"https://openrouter.ai/api/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:e,messages:[{role:"user",content:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}],temperature:s,max_tokens:o})})).json.choices[0].message.content}async testConnection(n,t,e){await(0,_.requestUrl)({url:e||"https://openrouter.ai/api/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify({model:t,messages:[{role:"user",content:"Hello, world!"}],max_tokens:5})})}};var j=require("obsidian"),C=class{async translate(n,t,e,s,o,a,r,c){return(await(0,j.requestUrl)({url:`${a||"YOUR_AZURE_OPENAI_ENDPOINT"}/openai/deployments/${e}/chat/completions?api-version=2023-05-15`,method:"POST",headers:{"api-key":t,"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"user",content:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}],temperature:s,max_tokens:o})})).json.choices[0].message.content}async testConnection(n,t,e){await(0,j.requestUrl)({url:`${e||"YOUR_AZURE_OPENAI_ENDPOINT"}/openai/deployments/${t}/chat/completions?api-version=2023-05-15`,method:"POST",headers:{"api-key":n,"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"user",content:"Hello, world!"}],max_tokens:5})})}};var U=require("obsidian"),k=class{async translate(n,t,e,s,o,a,r,c){return(await(0,U.requestUrl)({url:a||"http://localhost:11434/api/chat",method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:e,messages:[{role:"user",content:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}],options:{temperature:s,num_predict:o},stream:!1})})).json.message.content}async testConnection(n,t,e){await(0,U.requestUrl)({url:e||"http://localhost:11434/api/chat",method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:t,messages:[{role:"user",content:"Hello, world!"}],options:{num_predict:5},stream:!1})})}};var D=require("obsidian"),v=class{async translate(n,t,e,s,o,a,r,c){return(await(0,D.requestUrl)({url:a||"http://localhost:1234/v1/chat/completions",method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:e,messages:[{role:"user",content:`Translate the following markdown document to ${r}, preserving all markdown formatting:

${n}`}],temperature:s,max_tokens:o})})).json.choices[0].message.content}async testConnection(n,t,e){await(0,D.requestUrl)({url:e||"http://localhost:1234/v1/chat/completions",method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:t,messages:[{role:"user",content:"Hello, world!"}],max_tokens:5})})}};function M(i){switch(i){case"openai":return new w;case"google":return new T;case"anthropic":return new S;case"deepseek":return new E;case"mistral":return new P;case"openrouter":return new A;case"azureopenai":return new C;case"ollama":return new k;case"lmstudio":return new v;default:throw new Error(`Unsupported provider: ${i}`)}}var K={llmProvider:"openai",outputPath:"translations",temperature:.7,maxTokens:2048,targetLanguage:"English",providerSettings:{openai:{apiKey:"",model:"gpt-4o",customEndpoint:""},google:{apiKey:"",model:"gemini-pro",customEndpoint:""},anthropic:{apiKey:"",model:"claude-3-opus-20240229",customEndpoint:""},deepseek:{apiKey:"",model:"deepseek-coder",customEndpoint:""},mistral:{apiKey:"",model:"mistral-large-latest",customEndpoint:""},openrouter:{apiKey:"",model:"mistralai/mistral-7b-instruct",customEndpoint:""},azureopenai:{apiKey:"",model:"gpt-4o",customEndpoint:""},ollama:{apiKey:"ollama",model:"llama2",customEndpoint:"http://localhost:11434/v1"},lmstudio:{apiKey:"lmstudio",model:"local-model",customEndpoint:"http://localhost:1234/v1"}}},y="translator-sidebar-view",J="AI Translator",z="languages";var l=require("obsidian");async function H(i,n){try{let t,e,s={method:"GET"};switch(i){case"ollama":if(e=`${n.customEndpoint}/tags`,s.headers={"Content-Type":"application/json"},t=await fetch(e,s),!t.ok)throw new Error(`Ollama API error: ${t.status} - ${await t.text()}`);return await t.json(),{success:!0,message:`Successfully connected to Ollama at ${n.customEndpoint} and listed models.`};case"lmstudio":let o=`${n.customEndpoint}/chat/completions`,a={method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n.apiKey||"EMPTY"}`},body:JSON.stringify({model:n.model,messages:[{role:"system",content:"You are a helpful assistant"},{role:"user",content:"Hello"}],temperature:.7,max_tokens:10})};try{if(t=await fetch(o,a),t.ok){try{await t.json()}catch(r){console.warn("LMStudio test connection response was not valid JSON, but status was OK. Assuming success.")}return{success:!0,message:`Successfully connected to LMStudio API at ${n.customEndpoint} using model '${n.model}'.`}}else{let r=await t.text();throw r.includes("Could not find model")?new Error(`LMStudio API error: Model '${n.model}' not found or loaded on the server.`):new Error(`LMStudio API error: ${t.status} - ${r}`)}}catch(r){let c=r instanceof Error?r.message:String(r);throw new Error(`LMStudio API connection failed: ${c}. Is the server running at ${n.customEndpoint}?`)}case"openrouter":if(e="https://openrouter.ai/api/v1/chat/completions",s.method="POST",s.headers={"Content-Type":"application/json",Authorization:`Bearer ${n.apiKey}`},s.body=JSON.stringify({model:n.model,messages:[{role:"user",content:"Test connection"}],max_tokens:1,temperature:0}),t=await fetch(e,s),!t.ok)throw new Error(`OpenRouter API error: ${t.status} - ${await t.text()}`);return await t.json(),{success:!0,message:`Successfully connected to OpenRouter API using model '${n.model}'.`};case"openai":if(e="https://api.openai.com/v1/models",s.headers={Authorization:`Bearer ${n.apiKey}`},t=await fetch(e,s),t.ok||(e="https://api.openai.com/v1/chat/completions",s.method="POST",s.headers={...s.headers,"Content-Type":"application/json"},s.body=JSON.stringify({model:n.model,messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),t=await fetch(e,s)),!t.ok)throw new Error(`OpenAI API error: ${t.status} - ${await t.text()}`);return await t.json(),{success:!0,message:"Successfully connected to OpenAI API."};case"deepseek":if(e="https://api.deepseek.com/v1/models",s.headers={Authorization:`Bearer ${n.apiKey}`},t=await fetch(e,s),t.ok||(e="https://api.deepseek.com/v1/chat/completions",s.method="POST",s.headers={...s.headers,"Content-Type":"application/json"},s.body=JSON.stringify({model:n.model,messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),t=await fetch(e,s)),!t.ok)throw new Error(`${i} API error: ${t.status} - ${await t.text()}`);return await t.json(),{success:!0,message:`Successfully connected to ${i} API.`};case"mistral":if(e="https://api.mistral.ai/v1/models",s.headers={Authorization:`Bearer ${n.apiKey}`},t=await fetch(e,s),t.ok||(e="https://api.mistral.ai/v1/chat/completions",s.method="POST",s.headers={...s.headers,"Content-Type":"application/json"},s.body=JSON.stringify({model:n.model,messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),t=await fetch(e,s)),!t.ok)throw new Error(`Mistral API error: ${t.status} - ${await t.text()}`);return await t.json(),{success:!0,message:"Successfully connected to Mistral API."};case"anthropic":if(e="https://api.anthropic.com/v1/messages",s.method="POST",s.headers={"Content-Type":"application/json","x-api-key":n.apiKey,"anthropic-version":"2023-06-01"},s.body=JSON.stringify({model:n.model,messages:[{role:"user",content:"Test"}],max_tokens:1}),t=await fetch(e,s),!t.ok)throw new Error(`Anthropic API error: ${t.status} - ${await t.text()}`);return await t.json(),{success:!0,message:"Successfully connected to Anthropic API."};case"google":if(e=`https://generativelanguage.googleapis.com/v1/models/${n.model}:generateContent?key=${n.apiKey}`,s.method="POST",s.headers={"Content-Type":"application/json"},s.body=JSON.stringify({contents:[{role:"user",parts:[{text:"Test"}]}],generationConfig:{maxOutputTokens:1,temperature:0}}),t=await fetch(e,s),!t.ok)throw new Error(`Google API error: ${t.status} - ${await t.text()}`);return await t.json(),{success:!0,message:"Successfully connected to Google API."};case"azureopenai":if(!n.customEndpoint||!n.model)throw new Error("Azure requires a Custom Endpoint and Model (Deployment Name).");if(e=`${n.customEndpoint}/openai/deployments/${n.model}/chat/completions?api-version=2024-02-15-preview`,s.method="POST",s.headers={"Content-Type":"application/json","api-key":n.apiKey},s.body=JSON.stringify({messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),t=await fetch(e,s),!t.ok)throw new Error(`Azure OpenAI API error: ${t.status} - ${await t.text()}`);return await t.json(),{success:!0,message:`Successfully connected to Azure OpenAI deployment '${n.model}'.`};default:return{success:!1,message:`Connection test not implemented for provider: ${i}`}}}catch(t){let e=t instanceof Error?t.message:String(t);return console.error(`Connection test failed for ${i}:`,t),{success:!1,message:`Connection failed: ${e}`}}}var O=class extends l.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new l.Setting(t).setName("LLM Provider").setHeading(),new l.Setting(t).setName("LLM Provider").setDesc("Choose the Large Language Model provider.").addDropdown(s=>s.addOption("openai","OpenAI").addOption("google","Google AI").addOption("anthropic","Anthropic").addOption("deepseek","Deepseek").addOption("mistral","Mistral").addOption("openrouter","OpenRouter").addOption("azureopenai","Azure OpenAI").addOption("ollama","Ollama").addOption("lmstudio","LMStudio").setValue(this.plugin.settings.llmProvider).onChange(async o=>{this.plugin.settings.llmProvider=o,await this.plugin.saveSettings(),this.display()}));let e=this.plugin.settings.providerSettings[this.plugin.settings.llmProvider];e&&(new l.Setting(t).setName(`${this.plugin.settings.llmProvider} details`).setHeading(),new l.Setting(t).setName("API Key").setDesc("Your API key for the selected LLM provider. Note: API keys are provider-specific.").addText(s=>s.setPlaceholder("Enter your API key").setValue(e.apiKey||"").onChange(async o=>{e.apiKey=o,await this.plugin.saveSettings()})),new l.Setting(t).setName("Custom Endpoint").setDesc("Custom API endpoint for the selected provider.").addText(s=>s.setPlaceholder("e.g., http://localhost:1234/v1 or your Azure OpenAI endpoint").setValue(e.customEndpoint||"").onChange(async o=>{e.customEndpoint=o,await this.plugin.saveSettings()})),new l.Setting(t).setName("Model").setDesc("The model to use for translation.").addText(s=>s.setPlaceholder("e.g., gpt-4o").setValue(e.model||"").onChange(async o=>{e.model=o,await this.plugin.saveSettings()})),new l.Setting(t).setName("Test API Connection").setDesc("Click to test if the API connection is working with the current settings.").addButton(s=>s.setButtonText("Test Connection").setCta().onClick(async()=>{s.setDisabled(!0).setButtonText("Testing...");let o=new l.Notice(`Testing connection to ${this.plugin.settings.llmProvider}...`,0);try{let a=await H(this.plugin.settings.llmProvider,e);o.hide(),a.success?new l.Notice(`\u2705 Success: ${a.message}`,5e3):new l.Notice(`\u274C Failed: ${a.message}. Check console.`,1e4)}catch(a){let r=a instanceof Error?a.message:String(a);o.hide(),new l.Notice(`Error during connection test: ${r}`,1e4),console.error(`Error testing ${this.plugin.settings.llmProvider} connection from settings:`,a)}finally{s.setDisabled(!1).setButtonText("Test Connection")}}))),new l.Setting(t).setName("Translation Settings").setHeading(),new l.Setting(t).setName("Temperature").setDesc("Controls randomness. Higher values make the output more random.").addSlider(s=>s.setLimits(0,1,.1).setValue(this.plugin.settings.temperature).setDynamicTooltip().onChange(async o=>{this.plugin.settings.temperature=o,await this.plugin.saveSettings()})),new l.Setting(t).setName("Max Tokens").setDesc("The maximum number of tokens to generate.").addText(s=>s.setPlaceholder("e.g., 2048").setValue(this.plugin.settings.maxTokens.toString()).onChange(async o=>{this.plugin.settings.maxTokens=parseInt(o),await this.plugin.saveSettings()})),new l.Setting(t).setName("Target Language").setDesc("The language to translate the document into.").addDropdown(s=>{let o={English:"English",Spanish:"Espa\xF1ol",French:"Fran\xE7ais",German:"Deutsch",Chinese:"\u4E2D\u6587",Japanese:"\u65E5\u672C\u8A9E",Korean:"\uD55C\uAD6D\uC5B4",Russian:"\u0420\u0443\u0441\u0441\u043A\u0438\u0439",Portuguese:"Portugu\xEAs",Italian:"Italiano",Arabic:"\u0627\u0644\u0639\u0631\u0628\u064A\u0629",Hindi:"\u0939\u093F\u0928\u094D\u0926\u0940",Bengali:"\u09AC\u09BE\u0982\u09B2\u09BE",Dutch:"Nederlands",Turkish:"T\xFCrk\xE7e",Vietnamese:"Ti\u1EBFng Vi\u1EC7t",Polish:"Polski",Thai:"\u0E44\u0E17\u0E22",Swedish:"Svenska",Indonesian:"Bahasa Indonesia"};for(let a in o)s.addOption(a,o[a]);s.setValue(this.plugin.settings.targetLanguage).onChange(async a=>{this.plugin.settings.targetLanguage=a,await this.plugin.saveSettings()})}),new l.Setting(t).setName("Output Path").setDesc("Path to save translated files.").addText(s=>s.setPlaceholder("e.g., translations/").setValue(this.plugin.settings.outputPath).onChange(async o=>{this.plugin.settings.outputPath=o,await this.plugin.saveSettings()}))}};var h=require("obsidian"),f=class extends h.ItemView{constructor(t,e){super(t);this.statusEl=null;this.progressEl=null;this.progressBarContainerEl=null;this.logEl=null;this.logContent=[];this.cancelButton=null;this.plugin=e}getViewType(){return"translator-sidebar-view"}getDisplayText(){return"AI Translator"}clearDisplay(){this.logContent=[],this.logEl&&this.logEl.empty(),this.statusEl&&this.statusEl.setText("Ready"),this.progressEl&&(this.progressEl.dataset.progress="0",this.progressEl.setText(""),this.progressEl.removeClass("is-error")),this.progressBarContainerEl&&this.progressBarContainerEl.addClass("is-hidden"),this.cancelButton&&(this.cancelButton.disabled=!0,this.cancelButton.removeClass("is-active"))}updateStatus(t,e){if(this.statusEl&&this.statusEl.setText(t),this.cancelButton&&this.plugin.getIsBusy()?(this.cancelButton.disabled=!1,this.cancelButton.addClass("is-active")):this.cancelButton&&(this.cancelButton.disabled=!0,this.cancelButton.removeClass("is-active")),e!==void 0&&this.progressEl&&this.progressBarContainerEl)if(this.progressBarContainerEl.removeClass("is-hidden"),e>=0){let s=Math.min(100,Math.max(0,e));this.progressEl.dataset.progress=String(s),this.progressEl.setText(`${Math.round(s)}%`),this.progressEl.removeClass("is-error")}else this.progressEl.dataset.progress="100",this.progressEl.addClass("is-error"),this.progressEl.setText("Cancelled/Error")}log(t){if(this.logEl){let e=`[${new Date().toLocaleTimeString()}]`,s=`${e} ${t}`;this.logContent.push(s);let o=this.logEl.createEl("div",{cls:"translator-log-entry"});o.createEl("span",{text:e,cls:"translator-log-time"}),o.createEl("span",{text:` ${t}`,cls:"translator-log-message"}),this.logEl.scrollTop=this.logEl.scrollHeight}}async onOpen(){let t=this.containerEl.children[1];t.empty(),t.addClass("translator-sidebar-container"),t.createEl("h4",{text:"AI Translator"});let s=t.createDiv({cls:"translator-button-group"}).createEl("button",{text:"Translate Active File",cls:"mod-cta"});s.onclick=async()=>{await this.plugin.translateAndCompareFile()},t.createEl("hr");let o=t.createDiv({cls:"translator-progress-area"});this.statusEl=o.createEl("p",{text:"Ready",cls:"translator-status-text"}),this.progressBarContainerEl=o.createEl("div",{cls:"translator-progress-bar-container is-hidden"}),this.progressEl=this.progressBarContainerEl.createEl("div",{cls:"translator-progress-bar-fill"}),this.cancelButton=o.createEl("button",{text:"Cancel",cls:"translator-cancel-button"}),this.cancelButton.onclick=()=>{this.plugin.cancelTranslation()},t.createEl("hr");let a=t.createDiv({cls:"translator-log-header"});a.createEl("h5",{text:"Log"});let r=a.createEl("button",{text:"Copy Log",cls:"translator-copy-log-button"});r.onclick=()=>{this.logContent.length>0?navigator.clipboard.writeText(this.logContent.join(`
`)).then(()=>new h.Notice("Log copied!"),()=>new h.Notice("Failed to copy log.")):new h.Notice("Log is empty.")},this.logEl=t.createEl("div",{cls:"translator-log-output is-selectable"})}async onClose(){}};var b=class extends d.Plugin{constructor(){super(...arguments);this.isBusy=!1;this.abortController=null}getIsBusy(){return this.isBusy}setBusy(t){this.isBusy=t}async onload(){await this.loadSettings(),this.registerView(y,e=>new f(e,this)),this.addRibbonIcon(z,J,()=>this.activateView()).addClass("translator-ribbon-class"),this.addCommand({id:"open-translator-sidebar",name:"Open sidebar",callback:()=>this.activateView()}),this.statusBarItem=this.addStatusBarItem(),this.updateStatusBar("Ready"),this.addCommand({id:"translate-and-compare-file",name:"Translate and Compare File",callback:()=>this.translateAndCompareFile()}),this.addSettingTab(new O(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},K,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}updateStatusBar(t){this.statusBarItem&&this.statusBarItem.setText(`Translator: ${t}`)}async activateView(){let t=this.app.workspace.getLeavesOfType(y);if(t.length>0){this.app.workspace.revealLeaf(t[0]);return}let e=this.app.workspace.getRightLeaf(!1);e?(await e.setViewState({type:y,active:!0}),this.app.workspace.revealLeaf(e)):(console.error("Could not get right sidebar leaf."),new d.Notice("Could not open Translator sidebar."))}getSidebarView(){let t=this.app.workspace.getLeavesOfType(y)[0];return t&&t.view instanceof f?t.view:null}cancelTranslation(){var t;this.abortController&&(this.abortController.abort(),this.isBusy=!1,this.updateStatusBar("Cancelled"),(t=this.getSidebarView())==null||t.updateStatus("Cancelled",-1))}async translateAndCompareFile(){if(this.isBusy){new d.Notice("Translator is busy.");return}this.isBusy=!0,this.abortController=new AbortController;let t=this.getSidebarView();t==null||t.clearDisplay(),t==null||t.log("Starting translation..."),this.updateStatusBar("Translating...");try{let e=this.app.workspace.getActiveFile();if(!e)throw new Error("No active file to translate.");if(!this.settings.providerSettings[this.settings.llmProvider].apiKey)throw new Error("API key is not set for the selected provider. Please configure it in the plugin settings.");t==null||t.updateStatus("Reading file...",10);let s=await this.app.vault.read(e),o=M(this.settings.llmProvider),{apiKey:a,model:r,customEndpoint:c}=this.settings.providerSettings[this.settings.llmProvider],p="",m=3;for(let u=0;u<m;u++)try{t==null||t.updateStatus(`Translating (attempt ${u+1})...`,20+u*20),p=await o.translate(s,a,r,this.settings.temperature,this.settings.maxTokens,c,this.settings.targetLanguage,this.abortController.signal);break}catch(F){if(this.abortController.signal.aborted)throw new Error("Translation cancelled");if(u===m-1)throw F;t==null||t.log(`Translation attempt ${u+1} failed. Retrying...`),await new Promise(G=>setTimeout(G,2e3))}t==null||t.updateStatus("Creating translated file...",80);let g=`${e.basename}.translated.md`,R=`${this.settings.outputPath}/${g}`;try{await this.app.vault.createFolder(this.settings.outputPath)}catch(u){}let V=await this.app.vault.create(R,p);t==null||t.updateStatus("Opening files...",90),await this.app.workspace.getLeaf("split","horizontal").openFile(e),await this.app.workspace.getLeaf("split","vertical").openFile(V),t==null||t.updateStatus("Translation complete!",100),new d.Notice("Translation complete.")}catch(e){e.message!=="Translation cancelled"&&(console.error("Translation Error:",e),new d.Notice("Error during translation. Check the console for details."),t==null||t.log(`Error: ${e.message}`),t==null||t.updateStatus("Error",-1))}finally{this.isBusy=!1,this.abortController=null,this.updateStatusBar("Ready")}}};
