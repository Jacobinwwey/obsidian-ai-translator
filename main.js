/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var P=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var L=Object.prototype.hasOwnProperty;var U=(i,s)=>{for(var t in s)P(i,t,{get:s[t],enumerable:!0})},D=(i,s,t,r)=>{if(s&&typeof s=="object"||typeof s=="function")for(let a of I(s))!L.call(i,a)&&a!==t&&P(i,a,{get:()=>s[a],enumerable:!(r=$(s,a))||r.enumerable});return i};var F=i=>D(P({},"__esModule",{value:!0}),i);var z={};U(z,{default:()=>y});module.exports=F(z);var l=require("obsidian");var v=require("obsidian"),u=class{async translate(s,t,r,a,e,n,o){return(await(0,v.requestUrl)({url:n||"https://api.openai.com/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:r,messages:[{role:"user",content:`Translate the following markdown document to ${o}, preserving all markdown formatting:

${s}`}],temperature:a,max_tokens:e})})).json.choices[0].message.content}};var S=require("obsidian"),c=class{async translate(s,t,r,a,e,n,o){return(await(0,S.requestUrl)({url:`https://generativelanguage.googleapis.com/v1beta/models/${r}:generateContent?key=${t}`,method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:`Translate the following markdown document to ${o}, preserving all markdown formatting:

${s}`}]}],generationConfig:{temperature:a,maxOutputTokens:e}})})).json.candidates[0].content.parts[0].text}};var O=require("obsidian"),d=class{async translate(s,t,r,a,e,n,o){return(await(0,O.requestUrl)({url:"https://api.anthropic.com/v1/messages",method:"POST",headers:{"x-api-key":t,"anthropic-version":"2023-06-01","Content-Type":"application/json"},body:JSON.stringify({model:r,max_tokens:e,temperature:a,messages:[{role:"user",content:`Translate the following markdown document to ${o}, preserving all markdown formatting:

${s}`}]})})).json.content[0].text}};var A=require("obsidian"),h=class{async translate(s,t,r,a,e,n,o){return(await(0,A.requestUrl)({url:n||"https://api.deepseek.com/chat/completions",method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:r,messages:[{role:"user",content:`Translate the following markdown document to ${o}, preserving all markdown formatting:

${s}`}],temperature:a,max_tokens:e})})).json.choices[0].message.content}};var b=require("obsidian"),w=class{async translate(s,t,r,a,e,n,o){return(await(0,b.requestUrl)({url:n||"https://api.mistral.ai/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:r,messages:[{role:"user",content:`Translate the following markdown document to ${o}, preserving all markdown formatting:

${s}`}],temperature:a,max_tokens:e})})).json.choices[0].message.content}};var C=require("obsidian"),T=class{async translate(s,t,r,a,e,n,o){return(await(0,C.requestUrl)({url:n||"https://openrouter.ai/api/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:r,messages:[{role:"user",content:`Translate the following markdown document to ${o}, preserving all markdown formatting:

${s}`}],temperature:a,max_tokens:e})})).json.choices[0].message.content}};var x=require("obsidian"),f=class{async translate(s,t,r,a,e,n,o){return(await(0,x.requestUrl)({url:`${n||"YOUR_AZURE_OPENAI_ENDPOINT"}/openai/deployments/${r}/chat/completions?api-version=2023-05-15`,method:"POST",headers:{"api-key":t,"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"user",content:`Translate the following markdown document to ${o}, preserving all markdown formatting:

${s}`}],temperature:a,max_tokens:e})})).json.choices[0].message.content}};function N(i){switch(i){case"openai":case"openai-compatible":return new u;case"google":return new c;case"anthropic":return new d;case"deepseek":return new h;case"mistral":return new w;case"openrouter":return new T;case"azureopenai":return new f;default:throw new Error(`Unsupported provider: ${i}`)}}var j={apiKey:"",llmProvider:"openai",outputPath:"translations",model:"gpt-4o",temperature:.7,maxTokens:2048,customEndpoint:"",targetLanguage:"English"},y=class extends l.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("language","Translate Document",()=>{this.translateAndCompareFile()}),this.addCommand({id:"translate-and-compare-file",name:"Translate and Compare File",callback:()=>this.translateAndCompareFile()}),this.addSettingTab(new k(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},j,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async translateAndCompareFile(){let t=this.app.workspace.getActiveFile();if(!t){new l.Notice("No active file to translate.");return}if(!this.settings.apiKey){new l.Notice("API key is not set. Please configure it in the plugin settings.");return}new l.Notice("Translating document...");let r=await this.app.vault.read(t);try{let e=await N(this.settings.llmProvider).translate(r,this.settings.apiKey,this.settings.model,this.settings.temperature,this.settings.maxTokens,this.settings.customEndpoint,this.settings.targetLanguage),n=`${t.basename}.translated.md`,o=`${this.settings.outputPath}/${n}`;try{await this.app.vault.createFolder(this.settings.outputPath)}catch(E){}let p=await this.app.vault.create(o,e);new l.Notice("Translation complete."),await this.app.workspace.getLeaf("split","horizontal").openFile(t),await this.app.workspace.getLeaf("split","vertical").openFile(p)}catch(a){console.error("Translation Error:",a),new l.Notice("Error during translation. Check the console for details.")}}},k=class extends l.PluginSettingTab{constructor(t,r){super(t,r);this.plugin=r}display(){let{containerEl:t}=this;t.empty(),new l.Setting(t).setName("API Key").setDesc("Your API key for the selected LLM provider.").addText(e=>e.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey).onChange(async n=>{this.plugin.settings.apiKey=n,await this.plugin.saveSettings()}));let r=new l.Setting(t).setName("LLM Provider").setDesc("Choose the Large Language Model provider.").addDropdown(e=>e.addOption("openai","OpenAI").addOption("google","Google AI").addOption("anthropic","Anthropic").addOption("deepseek","Deepseek").addOption("mistral","Mistral").addOption("openrouter","OpenRouter").addOption("azureopenai","Azure OpenAI").addOption("openai-compatible","OpenAI Compatible (LMStudio/Ollama)").setValue(this.plugin.settings.llmProvider).onChange(async n=>{this.plugin.settings.llmProvider=n,await this.plugin.saveSettings(),this.display()}));new l.Setting(t).setName("Custom Endpoint").setDesc("Custom API endpoint for OpenAI Compatible or Azure OpenAI providers.").addText(e=>e.setPlaceholder("e.g., http://localhost:1234/v1 or your Azure OpenAI endpoint").setValue(this.plugin.settings.customEndpoint).onChange(async n=>{this.plugin.settings.customEndpoint=n,await this.plugin.saveSettings()})).settingEl.toggle(this.plugin.settings.llmProvider==="openai-compatible"||this.plugin.settings.llmProvider==="azureopenai"),new l.Setting(t).setName("Model").setDesc("The model to use for translation.").addText(e=>e.setPlaceholder("e.g., gpt-4o").setValue(this.plugin.settings.model).onChange(async n=>{this.plugin.settings.model=n,await this.plugin.saveSettings()})),new l.Setting(t).setName("Temperature").setDesc("Controls randomness. Higher values make the output more random.").addSlider(e=>e.setLimits(0,1,.1).setValue(this.plugin.settings.temperature).setDynamicTooltip().onChange(async n=>{this.plugin.settings.temperature=n,await this.plugin.saveSettings()})),new l.Setting(t).setName("Max Tokens").setDesc("The maximum number of tokens to generate.").addText(e=>e.setPlaceholder("e.g., 2048").setValue(this.plugin.settings.maxTokens.toString()).onChange(async n=>{this.plugin.settings.maxTokens=parseInt(n),await this.plugin.saveSettings()})),new l.Setting(t).setName("Target Language").setDesc("The language to translate the document into.").addDropdown(e=>{let n={English:"English",Spanish:"Espa\xF1ol",French:"Fran\xE7ais",German:"Deutsch",Chinese:"\u4E2D\u6587",Japanese:"\u65E5\u672C\u8A9E",Korean:"\uD55C\uAD6D\uC5B4",Russian:"\u0420\u0443\u0441\u0441\u043A\u0438\u0439",Portuguese:"Portugu\xEAs",Italian:"Italiano",Arabic:"\u0627\u0644\u0639\u0631\u0628\u064A\u0629",Hindi:"\u0939\u093F\u0928\u094D\u0926\u0940",Bengali:"\u09AC\u09BE\u0982\u09B2\u09BE",Dutch:"Nederlands",Turkish:"T\xFCrk\xE7e",Vietnamese:"Ti\u1EBFng Vi\u1EC7t",Polish:"Polski",Thai:"\u0E44\u0E17\u0E22",Swedish:"Svenska",Indonesian:"Bahasa Indonesia"};for(let o in n)e.addOption(o,n[o]);e.setValue(this.plugin.settings.targetLanguage).onChange(async o=>{this.plugin.settings.targetLanguage=o,await this.plugin.saveSettings()})}),new l.Setting(t).setName("Output Path").setDesc("Path to save translated files.").addText(e=>e.setPlaceholder("e.g., translations/").setValue(this.plugin.settings.outputPath).onChange(async n=>{this.plugin.settings.outputPath=n,await this.plugin.saveSettings()}))}};
