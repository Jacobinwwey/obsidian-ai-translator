import { requestUrl } from 'obsidian';import { Translator } from './index';export class LMStudioTranslator implements Translator {    async translate(content: string, apiKey: string, model: string, temperature: number, maxTokens: number, customEndpoint?: string, targetLanguage?: string, signal?: AbortSignal): Promise<string> {        const apiUrl = customEndpoint || 'http://localhost:1234/v1/chat/completions';        const response = await requestUrl({            url: apiUrl,            method: 'POST',            headers: {                'Content-Type': 'application/json'            },            body: JSON.stringify({                model: model,                messages: [{ role: "user", content: `Translate the following markdown document to ${targetLanguage}, preserving all markdown formatting:\n\n${content}` }],                temperature: temperature,                max_tokens: maxTokens            })        });        const data = response.json;        return data.choices[0].message.content;    }    async testConnection(apiKey: string, model: string, customEndpoint?: string): Promise<void> {        const apiUrl = customEndpoint || 'http://localhost:1234/v1/chat/completions';        await requestUrl({            url: apiUrl,            method: 'POST',            headers: {                'Content-Type': 'application/json'            },            body: JSON.stringify({                model: model,                messages: [{ role: "user", content: "Hello, world!" }],                max_tokens: 5            })        });    }}